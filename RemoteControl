package net.pocketmagic.android.mycursoroverlay;

import com.cworld.browser.player.R;

import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.PixelFormat;
import android.os.IBinder;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.Gravity;
import android.view.MotionEvent;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.view.WindowManager.LayoutParams;
import android.widget.Toast;


public class CursorService extends Service {
    OverlayView mView;

    /**
     * @param x
     * @param y
     * @param autoenable if set, it will automatically show the cursor when movement is detected
     */
    public void Update(final int x, final int y, final boolean autoenable) {
    	mView.Update(x,y);
    	if ((x!=0 || y!= 0) && autoenable && !mView.isCursorShown() ) 
    		ShowCursor(true); //will also post invalidate
    	else
    		mView.postInvalidate();
    }
    public void ShowCursor(boolean status) {
    	Log.v("jxhe", "ShowCursor");
    	mView.ShowCursor(status);
    	mView.postInvalidate();
    }
    
    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }

    @Override
    public void onCreate() {
        super.onCreate();
        Singleton.getInstance().m_CurService = this;

		Log.v("jxhe", "Service created");
		
        mView = new OverlayView(this);
        WindowManager.LayoutParams params = new WindowManager.LayoutParams(
                WindowManager.LayoutParams.MATCH_PARENT,
                WindowManager.LayoutParams.MATCH_PARENT,
                WindowManager.LayoutParams.TYPE_SYSTEM_OVERLAY,//TYPE_SYSTEM_ALERT,//TYPE_SYSTEM_OVERLAY,
                WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE | WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE |
                WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN |WindowManager.LayoutParams.FLAG_FULLSCREEN, 
                //will cover status bar as well!!!
                PixelFormat.TRANSLUCENT);
        params.gravity = Gravity.LEFT | Gravity.TOP;
       //params.x = 100;
        //params.y = 100;
        params.setTitle("Cursor");
        WindowManager wm = (WindowManager) getSystemService(WINDOW_SERVICE);
        wm.addView(mView, params);
        //添加获取window窗口大小
        DisplayMetrics metrics = new DisplayMetrics();
	       	wm.getDefaultDisplay().getMetrics(metrics);
	       	Singleton.getInstance().m_nScreenW = wm.getDefaultDisplay().getWidth();
	       	Singleton.getInstance().m_nScreenH = wm.getDefaultDisplay().getHeight();
	       	Log.v("jxhe", "m_nScreenW::" + Singleton.getInstance().m_nScreenW + 
	       			" m_nScreenH::" + Singleton.getInstance().m_nScreenH);
        //wm.
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        Log.v("jxhe", "Service destroyed");
        Singleton.getInstance().m_CurService = null;
        if(mView != null) {
            ((WindowManager) getSystemService(WINDOW_SERVICE)).removeView(mView);
            mView = null;
        }
    }
}

class OverlayView extends ViewGroup {
    private Paint mLoadPaint;
    boolean mShowCursor;
    
    Bitmap	cursor;
    public int x = 0,y = 0;
    
    public void Update(int nx, int ny) {
    	x = nx; y = ny;
    }
    public void ShowCursor(boolean status) {
    	mShowCursor = status;
	}
    public boolean isCursorShown() {
    	return mShowCursor;
    }
    
	public OverlayView(Context context) {
        super(context);
        cursor = BitmapFactory.decodeResource(context.getResources(), R.drawable.cursor);

        mLoadPaint = new Paint();
        mLoadPaint.setAntiAlias(true);
        mLoadPaint.setTextSize(10);
        mLoadPaint.setARGB(255, 255, 0, 0);
    }

    @Override
    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        //canvas.drawText("Hello World", 0, 0, mLoadPaint);
        
        if (mShowCursor) {
        	Log.v("jxhe", "ShowCursor::" + " x:" + x +" y:"+y);
        	canvas.drawBitmap(cursor,x,y,null);
        }
    }

    @Override
    protected void onLayout(boolean arg0, int arg1, int arg2, int arg3, int arg4) {
    }

    @Override
    public boolean onTouchEvent(MotionEvent event) {
        return true;
    }
}
